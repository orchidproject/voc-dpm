classdef Detections < robotics.ros.Message
    %Detections MATLAB implementation of mosaic_msgs/Detections
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2015 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'mosaic_msgs/Detections' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '6202a1ec795455769818fbf54d14b5b4' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        SensorMsgsRegionOfInterestClass = robotics.ros.msg.internal.MessageFactory.getClassForType('sensor_msgs/RegionOfInterest') % Dispatch to MATLAB class for message type sensor_msgs/RegionOfInterest
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Detections_
        Scores
        GroundTruth
    end
    
    properties (Access = protected)
        Cache = struct('Header', [], 'Detections_', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Detections_', 'GroundTruth', 'Header', 'Scores'} % List of non-constant message properties
        ROSPropertyList = {'detections', 'ground_truth', 'header', 'scores'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Detections(msg)
            %Detections Construct the message object Detections
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'Detections', 'header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function detections_ = get.Detections_(obj)
            %get.Detections_ Get the value for property Detections_
            if isempty(obj.Cache.Detections_)
                javaArray = obj.JavaMessage.getDetections;
                array = obj.readJavaArray(javaArray, obj.SensorMsgsRegionOfInterestClass);
                obj.Cache.Detections_ = feval(obj.SensorMsgsRegionOfInterestClass, array);
            end
            detections_ = obj.Cache.Detections_;
        end
        
        function set.Detections_(obj, detections_)
            %set.Detections_ Set the value for property Detections_
            if ~isvector(detections_) && isempty(detections_)
                % Allow empty [] input
                detections_ = feval([obj.SensorMsgsRegionOfInterestClass '.empty'], 0, 1);
            end
            
            validateattributes(detections_, {obj.SensorMsgsRegionOfInterestClass}, {'vector'}, 'Detections', 'detections_');
            
            javaArray = obj.JavaMessage.getDetections;
            array = obj.writeJavaArray(detections_, javaArray, obj.SensorMsgsRegionOfInterestClass);
            obj.JavaMessage.setDetections(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Detections_)
                obj.Cache.Detections_ = [];
                obj.Cache.Detections_ = obj.Detections_;
            end
        end
        
        function scores = get.Scores(obj)
            %get.Scores Get the value for property Scores
            javaArray = obj.JavaMessage.getScores;
            array = obj.readJavaArray(javaArray, 'double');
            scores = double(array);
        end
        
        function set.Scores(obj, scores)
            %set.Scores Set the value for property Scores
            if ~isvector(scores) && isempty(scores)
                % Allow empty [] input
                scores = double.empty(0,1);
            end
            
            validateattributes(scores, {'numeric'}, {'vector'}, 'Detections', 'scores');
            
            javaArray = obj.JavaMessage.getScores;
            array = obj.writeJavaArray(scores, javaArray, 'double');
            obj.JavaMessage.setScores(array);
        end
        
        function groundtruth = get.GroundTruth(obj)
            %get.GroundTruth Get the value for property GroundTruth
            javaArray = obj.JavaMessage.getGroundTruth;
            array = obj.readJavaArray(javaArray, 'char');
            groundtruth = arrayfun(@(x) char(x), array, 'UniformOutput', false);
        end
        
        function set.GroundTruth(obj, groundtruth)
            %set.GroundTruth Set the value for property GroundTruth
            if ~isvector(groundtruth) && isempty(groundtruth)
                % Allow empty [] input
                groundtruth = cell.empty(0,1);
            end
            
            validateattributes(groundtruth, {'cell'}, {'vector'}, 'Detections', 'groundtruth');
            if any(cellfun(@(x) ~ischar(x), groundtruth))
                error(message('robotics:ros:message:CellArrayStringError', ...
                    'groundtruth'));
            end
            
            javaArray = obj.JavaMessage.getGroundTruth;
            array = obj.writeJavaArray(groundtruth, javaArray, 'char');
            obj.JavaMessage.setGroundTruth(array);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
            obj.Cache.Detections_ = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Scores = obj.Scores;
            cpObj.GroundTruth = obj.GroundTruth;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
            cpObj.Detections_ = copy(obj.Detections_);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Scores = strObj.Scores;
            obj.GroundTruth = strObj.GroundTruth;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
            Detections_Cell = arrayfun(@(x) feval([obj.SensorMsgsRegionOfInterestClass '.loadobj'], x), strObj.Detections_, 'UniformOutput', false);
            obj.Detections_ = vertcat(Detections_Cell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Scores = obj.Scores;
            strObj.GroundTruth = obj.GroundTruth;
            strObj.Header = saveobj(obj.Header);
            strObj.Detections_ = arrayfun(@(x) saveobj(x), obj.Detections_);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.mosaic_msgs.Detections.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.mosaic_msgs.Detections;
            obj.reload(strObj);
        end
    end
end
