classdef Observation < robotics.ros.Message
    %Observation MATLAB implementation of mosaic_msgs/Observation
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2015 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'mosaic_msgs/Observation' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '40d5dc83fe41c0c16923a4b04ae30594' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        GeometryMsgsPointClass = robotics.ros.msg.internal.MessageFactory.getClassForType('geometry_msgs/Point') % Dispatch to MATLAB class for message type geometry_msgs/Point
    end
    
    properties (Dependent)
        CamPos
        ZCam
        ZWorld
        Score
        GroundTruth
    end
    
    properties (Access = protected)
        Cache = struct('CamPos', [], 'ZCam', [], 'ZWorld', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'CamPos', 'GroundTruth', 'Score', 'ZCam', 'ZWorld'} % List of non-constant message properties
        ROSPropertyList = {'cam_pos', 'ground_truth', 'score', 'z_cam', 'z_world'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Observation(msg)
            %Observation Construct the message object Observation
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function campos = get.CamPos(obj)
            %get.CamPos Get the value for property CamPos
            if isempty(obj.Cache.CamPos)
                obj.Cache.CamPos = feval(obj.GeometryMsgsPointClass, obj.JavaMessage.getCamPos);
            end
            campos = obj.Cache.CamPos;
        end
        
        function set.CamPos(obj, campos)
            %set.CamPos Set the value for property CamPos
            validateattributes(campos, {obj.GeometryMsgsPointClass}, {'nonempty', 'scalar'}, 'Observation', 'campos');
            
            obj.JavaMessage.setCamPos(campos.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.CamPos)
                obj.Cache.CamPos.setJavaObject(campos.getJavaObject);
            end
        end
        
        function zcam = get.ZCam(obj)
            %get.ZCam Get the value for property ZCam
            if isempty(obj.Cache.ZCam)
                obj.Cache.ZCam = feval(obj.GeometryMsgsPointClass, obj.JavaMessage.getZCam);
            end
            zcam = obj.Cache.ZCam;
        end
        
        function set.ZCam(obj, zcam)
            %set.ZCam Set the value for property ZCam
            validateattributes(zcam, {obj.GeometryMsgsPointClass}, {'nonempty', 'scalar'}, 'Observation', 'zcam');
            
            obj.JavaMessage.setZCam(zcam.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.ZCam)
                obj.Cache.ZCam.setJavaObject(zcam.getJavaObject);
            end
        end
        
        function zworld = get.ZWorld(obj)
            %get.ZWorld Get the value for property ZWorld
            if isempty(obj.Cache.ZWorld)
                obj.Cache.ZWorld = feval(obj.GeometryMsgsPointClass, obj.JavaMessage.getZWorld);
            end
            zworld = obj.Cache.ZWorld;
        end
        
        function set.ZWorld(obj, zworld)
            %set.ZWorld Set the value for property ZWorld
            validateattributes(zworld, {obj.GeometryMsgsPointClass}, {'nonempty', 'scalar'}, 'Observation', 'zworld');
            
            obj.JavaMessage.setZWorld(zworld.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.ZWorld)
                obj.Cache.ZWorld.setJavaObject(zworld.getJavaObject);
            end
        end
        
        function score = get.Score(obj)
            %get.Score Get the value for property Score
            score = double(obj.JavaMessage.getScore);
        end
        
        function set.Score(obj, score)
            %set.Score Set the value for property Score
            validateattributes(score, {'numeric'}, {'nonempty', 'scalar'}, 'Observation', 'score');
            
            obj.JavaMessage.setScore(score);
        end
        
        function groundtruth = get.GroundTruth(obj)
            %get.GroundTruth Get the value for property GroundTruth
            groundtruth = char(obj.JavaMessage.getGroundTruth);
        end
        
        function set.GroundTruth(obj, groundtruth)
            %set.GroundTruth Set the value for property GroundTruth
            validateattributes(groundtruth, {'char'}, {}, 'Observation', 'groundtruth');
            
            obj.JavaMessage.setGroundTruth(groundtruth);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.CamPos = [];
            obj.Cache.ZCam = [];
            obj.Cache.ZWorld = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Score = obj.Score;
            cpObj.GroundTruth = obj.GroundTruth;
            
            % Recursively copy compound properties
            cpObj.CamPos = copy(obj.CamPos);
            cpObj.ZCam = copy(obj.ZCam);
            cpObj.ZWorld = copy(obj.ZWorld);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Score = strObj.Score;
            obj.GroundTruth = strObj.GroundTruth;
            obj.CamPos = feval([obj.GeometryMsgsPointClass '.loadobj'], strObj.CamPos);
            obj.ZCam = feval([obj.GeometryMsgsPointClass '.loadobj'], strObj.ZCam);
            obj.ZWorld = feval([obj.GeometryMsgsPointClass '.loadobj'], strObj.ZWorld);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Score = obj.Score;
            strObj.GroundTruth = obj.GroundTruth;
            strObj.CamPos = saveobj(obj.CamPos);
            strObj.ZCam = saveobj(obj.ZCam);
            strObj.ZWorld = saveobj(obj.ZWorld);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.mosaic_msgs.Observation.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.mosaic_msgs.Observation;
            obj.reload(strObj);
        end
    end
end
