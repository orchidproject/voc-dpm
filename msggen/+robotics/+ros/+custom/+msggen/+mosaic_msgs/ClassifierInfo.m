classdef ClassifierInfo < robotics.ros.Message
    %ClassifierInfo MATLAB implementation of mosaic_msgs/ClassifierInfo
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2015 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'mosaic_msgs/ClassifierInfo' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '0513a5bd9af529c61e581b1cf4ca71e4' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        WindowHeight
        WindowWidth
        ImageHeight
        ImageWidth
        WindowStride
        MinScale
        MaxScale
        ScaleFactor
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Header', 'ImageHeight', 'ImageWidth', 'MaxScale', 'MinScale', 'ScaleFactor', 'WindowHeight', 'WindowStride', 'WindowWidth'} % List of non-constant message properties
        ROSPropertyList = {'header', 'image_height', 'image_width', 'max_scale', 'min_scale', 'scale_factor', 'window_height', 'window_stride', 'window_width'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = ClassifierInfo(msg)
            %ClassifierInfo Construct the message object ClassifierInfo
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'ClassifierInfo', 'header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function windowheight = get.WindowHeight(obj)
            %get.WindowHeight Get the value for property WindowHeight
            windowheight = int32(obj.JavaMessage.getWindowHeight);
        end
        
        function set.WindowHeight(obj, windowheight)
            %set.WindowHeight Set the value for property WindowHeight
            validateattributes(windowheight, {'numeric'}, {'nonempty', 'scalar'}, 'ClassifierInfo', 'windowheight');
            
            obj.JavaMessage.setWindowHeight(windowheight);
        end
        
        function windowwidth = get.WindowWidth(obj)
            %get.WindowWidth Get the value for property WindowWidth
            windowwidth = int32(obj.JavaMessage.getWindowWidth);
        end
        
        function set.WindowWidth(obj, windowwidth)
            %set.WindowWidth Set the value for property WindowWidth
            validateattributes(windowwidth, {'numeric'}, {'nonempty', 'scalar'}, 'ClassifierInfo', 'windowwidth');
            
            obj.JavaMessage.setWindowWidth(windowwidth);
        end
        
        function imageheight = get.ImageHeight(obj)
            %get.ImageHeight Get the value for property ImageHeight
            imageheight = int32(obj.JavaMessage.getImageHeight);
        end
        
        function set.ImageHeight(obj, imageheight)
            %set.ImageHeight Set the value for property ImageHeight
            validateattributes(imageheight, {'numeric'}, {'nonempty', 'scalar'}, 'ClassifierInfo', 'imageheight');
            
            obj.JavaMessage.setImageHeight(imageheight);
        end
        
        function imagewidth = get.ImageWidth(obj)
            %get.ImageWidth Get the value for property ImageWidth
            imagewidth = int32(obj.JavaMessage.getImageWidth);
        end
        
        function set.ImageWidth(obj, imagewidth)
            %set.ImageWidth Set the value for property ImageWidth
            validateattributes(imagewidth, {'numeric'}, {'nonempty', 'scalar'}, 'ClassifierInfo', 'imagewidth');
            
            obj.JavaMessage.setImageWidth(imagewidth);
        end
        
        function windowstride = get.WindowStride(obj)
            %get.WindowStride Get the value for property WindowStride
            windowstride = int32(obj.JavaMessage.getWindowStride);
        end
        
        function set.WindowStride(obj, windowstride)
            %set.WindowStride Set the value for property WindowStride
            validateattributes(windowstride, {'numeric'}, {'nonempty', 'scalar'}, 'ClassifierInfo', 'windowstride');
            
            obj.JavaMessage.setWindowStride(windowstride);
        end
        
        function minscale = get.MinScale(obj)
            %get.MinScale Get the value for property MinScale
            minscale = double(obj.JavaMessage.getMinScale);
        end
        
        function set.MinScale(obj, minscale)
            %set.MinScale Set the value for property MinScale
            validateattributes(minscale, {'numeric'}, {'nonempty', 'scalar'}, 'ClassifierInfo', 'minscale');
            
            obj.JavaMessage.setMinScale(minscale);
        end
        
        function maxscale = get.MaxScale(obj)
            %get.MaxScale Get the value for property MaxScale
            maxscale = double(obj.JavaMessage.getMaxScale);
        end
        
        function set.MaxScale(obj, maxscale)
            %set.MaxScale Set the value for property MaxScale
            validateattributes(maxscale, {'numeric'}, {'nonempty', 'scalar'}, 'ClassifierInfo', 'maxscale');
            
            obj.JavaMessage.setMaxScale(maxscale);
        end
        
        function scalefactor = get.ScaleFactor(obj)
            %get.ScaleFactor Get the value for property ScaleFactor
            scalefactor = double(obj.JavaMessage.getScaleFactor);
        end
        
        function set.ScaleFactor(obj, scalefactor)
            %set.ScaleFactor Set the value for property ScaleFactor
            validateattributes(scalefactor, {'numeric'}, {'nonempty', 'scalar'}, 'ClassifierInfo', 'scalefactor');
            
            obj.JavaMessage.setScaleFactor(scalefactor);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.WindowHeight = obj.WindowHeight;
            cpObj.WindowWidth = obj.WindowWidth;
            cpObj.ImageHeight = obj.ImageHeight;
            cpObj.ImageWidth = obj.ImageWidth;
            cpObj.WindowStride = obj.WindowStride;
            cpObj.MinScale = obj.MinScale;
            cpObj.MaxScale = obj.MaxScale;
            cpObj.ScaleFactor = obj.ScaleFactor;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.WindowHeight = strObj.WindowHeight;
            obj.WindowWidth = strObj.WindowWidth;
            obj.ImageHeight = strObj.ImageHeight;
            obj.ImageWidth = strObj.ImageWidth;
            obj.WindowStride = strObj.WindowStride;
            obj.MinScale = strObj.MinScale;
            obj.MaxScale = strObj.MaxScale;
            obj.ScaleFactor = strObj.ScaleFactor;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.WindowHeight = obj.WindowHeight;
            strObj.WindowWidth = obj.WindowWidth;
            strObj.ImageHeight = obj.ImageHeight;
            strObj.ImageWidth = obj.ImageWidth;
            strObj.WindowStride = obj.WindowStride;
            strObj.MinScale = obj.MinScale;
            strObj.MaxScale = obj.MaxScale;
            strObj.ScaleFactor = obj.ScaleFactor;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.mosaic_msgs.ClassifierInfo.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.mosaic_msgs.ClassifierInfo;
            obj.reload(strObj);
        end
    end
end
